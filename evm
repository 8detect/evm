#!/usr/bin/env bash
#
# Elasticsearch Version Manager
# Purpose: Managing multiple Elasticsearch versions on your local development machine
# Licence: Apache License, version 2 (http://www.apache.org/licenses/LICENSE-2.0)
# Source: https://github.com/duydo/evm
# Version: 0.1.4
# Author: Duy Do (duydo)
# Contributors: Quang Nguyen (xluffy), Nham Le (nhamlh)

readonly EVM_VERSION="0.1.4"

SCRIPT="$0"
# SCRIPT may be an arbitrarily deep series of symlinks, lookup the concrete path.
if [[ -h "${SCRIPT}" ]]; then
  SCRIPT="$(readlink "${SCRIPT}")"
fi

readonly EVM_NAME=$(basename "${SCRIPT}")
readonly EVM_HOME=${EVM_HOME:-"${HOME}/.${EVM_NAME}"}

readonly ES="elasticsearch"
readonly ES_HOME="${EVM_HOME}/${ES}"
readonly ES_CMD="${ES_HOME}/bin/${ES}"
readonly ES_PLUGIN_CMD="${ES_HOME}/bin/${ES}-plugin"
readonly ES_1X_PLUGIN_CMD="${ES_HOME}/bin/plugin"

# Sub commands
readonly START_CMD='start'
readonly INSTALL_CMD='install'
readonly REMOVE_CMD='remove'
readonly LIST_CMD='list'
readonly USE_CMD='use'
readonly PLUGIN_CMD='plugin'
readonly VERSION_CMD='version'
readonly WHICH_CMD='which'

# Elasticsearch download repos
readonly ES_1X_DOWNLOAD_REPO="https://download.elastic.co/elasticsearch/elasticsearch"
readonly ES_2X_DOWNLOAD_REPO="https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch"
readonly ES_5X_DOWNLOAD_REPO="https://artifacts.elastic.co/downloads/elasticsearch"
readonly ES_DOWNLOAD_EXT="tar.gz"

# First use?
if [[ ! -d "${EVM_HOME}" ]]; then
  mkdir -p "${EVM_HOME}";
fi

_abort(){
  echo "${1:-"Something went wrong! Use evm -h for help."}"; exit 1
}

_abort_if_too_many_arguments() {
  if [[ ! -z "$@" ]]; then
    _abort "Too many arguments. Use evm -h for help."
  fi
}

_check_version() {
  local version="$1"
  if [[ -z "${version}" ]]; then
    _abort "A version is required."
  elif [[ ! "${version}" =~ ^([0-9]+\.){2}(\*|[0-9]+)$ ]]; then
    _abort "Invalid version: '${version}'."
  fi
}

_get_download_link() {
  local version="$1"
  local download_file="${ES}-${version}.${ES_DOWNLOAD_EXT}"
  case "${version}" in
    2.*)
      download_link="${ES_2X_DOWNLOAD_REPO}/${version}/${download_file}"
      ;;
    1.*)
      download_link="${ES_1X_DOWNLOAD_REPO}/${download_file}"
      ;;
    *)
      download_link="${ES_5X_DOWNLOAD_REPO}/${download_file}"
      ;;
  esac
  # Check if the download link exists
  if [[ ! -z "${download_link}" ]]; then
    _=$(wget --spider --tries 1 "${download_link}" 2>&1)
    if [ $? -eq 0 ]; then
      echo "${download_link}"
    fi
  fi
}

_get_sha_link() {
  local version="$1"
  local es_file="${ES}-${version}.${ES_DOWNLOAD_EXT}"
  case "${version}" in
    2.*)
      sha1_link="${ES_2X_DOWNLOAD_REPO}/${version}/${es_file}.sha1"
      ;;
    1.*)
      sha1_link="${ES_1X_DOWNLOAD_REPO}/${es_file}.sha1.txt"
      ;;
    *)
      sha1_link="${ES_5X_DOWNLOAD_REPO}/${es_file}.sha1"
      ;;
  esac
  # Check if the es link exists
  if [[ ! -z "${sha1_link}" ]]; then
    _=$(wget --spider --tries 1 "${sha1_link}" 2>&1)
    if [ $? -eq 0 ]; then
      echo "${sha1_link}"
    fi
  fi
}

_get_current_version() {
  local current_version="$(basename "$(find "${EVM_HOME}" -type l -name "${ES}" -exec readlink {} +)")"
  echo "${current_version}" | cut -d "-" -f 2
}

install_version() {
  local version="$1"; shift
  _abort_if_too_many_arguments "$@"
  _check_version "${version}"
  if [[ -d "${ES_HOME}-${version}" ]]; then
    _abort "Elasticsearch ${version} has been already installed."
  fi

  local download_link="$(_get_download_link "${version}")"
  if [[ -z "${download_link}" ]]; then
    _abort "Elasticsearch ${version} not found."
  fi

  echo "-> Downloading Elasticsearch ${version} from elastic.co"
  echo "Retrieving ${download_link}"
  local output_file="${EVM_HOME}/${ES}-${version}.${ES_DOWNLOAD_EXT}"
  wget -c "${download_link}" -O "${output_file}" || _abort "Could not download ${output_file}!"

  local sha1_link="$(_get_sha_link "${version}")"
  local sha1_value="$(curl -Ss "$sha1_link" | awk '{print $1}')"

  if [[ "$(sha1sum "$output_file" | awk '{print $1}')" != "$sha1_value" ]]; then
    _abort "File is malformed binary"
  fi

  echo "Installing ${output_file}"
  tar -xzf "${output_file}" -C "${EVM_HOME}/" || _abort "Could not extract the ${output_file}, please try to install again."

  # Remove the downloaded file
  rm -rf "${output_file}" || echo "Clean failed. Could not remove the downloaded file ${output_file}!"
  echo "-> Installed Elasticsearch ${version}"

  # Use this version if no other version in use
  local current_version=$(_get_current_version)
  if [[ -z "${current_version}" ]]; then
    use_version "${version}"
  fi
}

use_version() {
  local version="$1"; shift
  _abort_if_too_many_arguments "$@"
  _check_version "${version}"

  local use_version="${ES_HOME}-${version}"
  if [[ ! -d "${use_version}" ]]; then
    _abort "Elasticsearch ${version} not found."
  fi

  ln -sfn "${use_version}" "${ES_HOME}" || _abort "Could not create symbolic link ${ES_HOME} => ${use_version}"
  echo "-> Now using Elasticsearch ${version}"
}

start_current_version() {
  local current_version="$(_get_current_version)"
  if [[ -z "${current_version}" ]]; then
    _abort "No Elasticsearch version in use."
  fi

  local cmd_opts
  while getopts ":c:" option; do
    case "${option}" in
      c)
        local conf_path="$OPTARG"
        if [[ ! -d "${conf_path}" ]]; then
          _abort "Invalid config path: '${conf_path}'"
        fi
        case "$current_version" in
          1.*|2.*)
            cmd_opts="-Des.path.conf=${conf_path}"
            ;;
          *)
            cmd_opts="-Epath.conf=${conf_path}"
            ;;
        esac
        ;;
      :)
        _abort "The option [-$OPTARG] must not be empty." ;;
      \?)
        _abort "Unknown option: [-$OPTARG]. Use evm -h for help." ;;
    esac
  done
  shift "$((OPTIND -1))"

  _abort_if_too_many_arguments "$@"

  local cmd="${ES_CMD}"
  if [[ ! -z "${cmd_opts}" ]]; then
    cmd="${cmd} "${cmd_opts}""
  fi
  ${cmd}
}

remove_version() {
  local version="$1"; shift
  _abort_if_too_many_arguments "$@"
  _check_version "${version}"

  local removed_version_folder="${ES_HOME}-${version}"
  if [[ ! -d "${removed_version_folder}" ]]; then
    _abort "Elasticsearch ${version} not found."
  fi

  local current_version="$(_get_current_version)"
  if [[ "${version}" = "${current_version}" ]]; then
    _abort "Could not remove Elasticsearch ${version}, it is in use."
  fi

  rm -rf "${removed_version_folder}" || _abort "Could not remove the version ${version}."
  echo "-> Elasticsearch ${version} has been removed"
}

manage_plugin() {
  local current_version="$(_get_current_version)"
  if [[ -z "${current_version}" ]]; then
    _abort "No Elasticsearch version in use. Use evm -h for help."
  fi

  local list_opt="${LIST_CMD}"
  local install_opt="${INSTALL_CMD}"
  local remove_opt="${REMOVE_CMD}"
  case "${current_version}" in
    1.*)
      cmd="${ES_1X_PLUGIN_CMD}"
      list_opt="--${list_opt}"
      install_opt="--${install_opt}"
      remove_opt="--${remove_opt}"
      ;;
    2.*)
      cmd="${ES_1X_PLUGIN_CMD}"
      ;;
    *)
      cmd="${ES_PLUGIN_CMD}"
      ;;
  esac
  if [ ! -x "$cmd" ]; then
    _abort "The Elasticsearch plugin command not found or unexecutable."
  fi

  local plugin_sub_cmd="$1"; shift
  case "$plugin_sub_cmd" in
    ${LIST_CMD})
      _abort_if_too_many_arguments "$@"
      cmd="$cmd $list_opt"
      ;;
    ${INSTALL_CMD})
      local plugin="$1"; shift
      _abort_if_too_many_arguments "$@"
      if [[ -z "${plugin}" ]]; then
        _abort "A plugin is required."
      fi
      cmd="$cmd $install_opt ${plugin}"
      ;;
    ${REMOVE_CMD})
      local plugin="$1"; shift
      _abort_if_too_many_arguments "$@"
      if [[ -z "${plugin}" ]]; then
        _abort "A plugin is required."
      fi
      cmd="$cmd $remove_opt ${plugin}"
      ;;
    *)
      _abort "Unknown command: '${plugin_sub_cmd}'. Use evm -h for help."
      ;;
  esac

  ${cmd}
}

list_versions() {
  local current_version=$(_get_current_version)
  for e in $(find "${EVM_HOME}" -maxdepth 1 -mindepth 1 -type d -name "${ES}-*" | sort -nr); do
    local version="$(basename "${e}")"
    version="$(echo ${version} | cut -d "-" -f 2)"
    if [[ "${current_version}" = "${version}" ]]; then
      echo -e "\033[0;32m* ${version}\033[0m"
    else
      echo -e "  ${version}"
    fi
  done
}

print_evm_version(){
  echo "${EVM_NAME} ${EVM_VERSION}"
}

print_current_version() {
  echo "$(_get_current_version)"
}

print_version_path(){
  local version="${1:-$(_get_current_version)}"
  _check_version "${version}"

  local path="$ES_HOME-$version"
  if [[ -d "${path}" ]]; then
    echo "${path}"
  else
    echo "Elasticsearch ${version} not found."
  fi
}

print_usage() {
  cat <<'EOF'

Elasticsearch Version Manager

Usage:
 evm -h                                   Print help information
 evm -V                                   Print version information
 evm list                                 List all installed Elasticsearch versions
 evm version                              Print the current activated Elasticsearch version
 evm install <version>                    Install a specific Elasticsearch version
 evm use <version>                        Use a specific Elasticsearch version
 evm remove <version>                     Remove a specific Elasticsearch version if available
 evm which [<version>]                    Print path to installed Elasticsearch version
 evm plugin list                          List all installed Elasticsearch plugins
 evm plugin <install|remove> <plugin>     Install or remove an Elasticsearch plugin
 evm start [-c </path/to/config/dir>]     Start Elasticsearch with/without a specific config directory

Example:
 evm install 5.3.1                        Install Elasticsearch 5.3.1
 evm use 5.3.1                            Use Elasticsearch 5.3.1
 evm start                                Start Elasticsearch node with the default config directory
 evm start -c /etc/elasticsearch          Start Elasticsearch node with /etc/elasticsearch config directory
 evm plugin install x-pack                Install the x-pack plugin
 evm plugin remove x-pack                 Remove the x-pack plugin

Note: To uninstall, just remove the $EVM_HOME folder (usually ~/.evm)

EOF
}

main() {
  while getopts ":hV" opt; do
    case "${opt}" in
      h) print_usage; exit 0 ;;
      V) print_evm_version; exit 0 ;;
      \?) _abort "Unknown option: -${OPTARG}. Use evm -h for help." ;;
    esac
  done
  shift "$((OPTIND -1))"
  sub_cmd="$1"; shift
  case "${sub_cmd}" in
    ${INSTALL_CMD}) install_version "$@" ;;
    ${USE_CMD}) use_version "$@" ;;
    ${START_CMD}) start_current_version "$@" ;;
    ${REMOVE_CMD}) remove_version "$@" ;;
    ${PLUGIN_CMD}) manage_plugin "$@" ;;
    ${WHICH_CMD}) print_version_path "$@" ;;
    ${LIST_CMD})
      _abort_if_too_many_arguments "$@"
      list_versions
      ;;
    ${VERSION_CMD})
      _abort_if_too_many_arguments "$@"
      print_current_version
      ;;
    *) print_usage ;;
  esac
}

main "$@"
exit $?
