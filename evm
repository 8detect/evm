#!/bin/bash
#
# Elasticsearch Version Manager
# Purpose: Managing multiple Elasticsearch versions on your local development machine
# Licence: Apache License, version 2 (http://www.apache.org/licenses/LICENSE-2.0)
# Source: https://github.com/duydo/evm
# Version: 0.1.3
# Author: Duy Do (duydo)
# Contributors: Quang Nguyen (xluffy), Nham Le (nhamlh)
EVM_VERSION="0.1.3"

SCRIPT="$0"
# SCRIPT may be an arbitrarily deep series of symlinks, lookup the concrete path.
if [[ -h "${SCRIPT}" ]]; then
  SCRIPT=$(readlink "${SCRIPT}")
fi

EVM_NAME=$(basename "${SCRIPT}")
EVM_HOME=${EVM_HOME:-"${HOME}/.${EVM_NAME}"}

ES="elasticsearch"
ES_HOME="${EVM_HOME}/${ES}"
ES_CMD="${ES_HOME}/bin/${ES}"
ES_PLUGIN_CMD="${ES_HOME}/bin/${ES}-plugin"
ES_1X_PLUGIN_CMD="${ES_HOME}/bin/plugin"

# Sub commands
START_CMD='start'
INSTALL_CMD='install'
REMOVE_CMD='remove'
LIST_CMD='list'
USE_CMD='use'
PLUGIN_CMD='plugin'
VERSION_CMD='version'
WHICH_CMD='which'

# Elasticsearch download repos
ES_1X_DOWNLOAD_REPO="https://download.elastic.co/elasticsearch/elasticsearch"
ES_2X_DOWNLOAD_REPO="https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch"
ES_5X_DOWNLOAD_REPO="https://artifacts.elastic.co/downloads/elasticsearch"
ES_DOWNLOAD_EXT="tar.gz"

# First use?
if [ ! -d "${EVM_HOME}" ]; then
  mkdir -p "${EVM_HOME}";
fi


abort(){
  echo "${1:-"Something went wrong. Use evm -h for help."}"; exit 1
}

_check_version() {
  local version="$1"
  if [[ -z "${version}" ]]; then
    abort "A version is required."
  elif [[ ! "${version}" =~ ^([0-9]+\.){2}(\*|[0-9]+)$ ]]; then
    abort "Invalid version: '${version}'."
  fi
}

_get_download_link() {
  local version="$1"
  local download_file="${ES}-${version}.${ES_DOWNLOAD_EXT}"
  case "${version}" in
    2.*)
      download_link="${ES_2X_DOWNLOAD_REPO}/${version}/${download_file}"
      ;;
    1.*)
      download_link="${ES_1X_DOWNLOAD_REPO}/${download_file}"
      ;;
    *)
      download_link="${ES_5X_DOWNLOAD_REPO}/${download_file}"
      ;;
  esac
  # Check if the download link exists
  if [[ ! -z "${download_link}" ]]; then
      _=$(wget --spider --tries 1 "${download_link}" 2>&1)
      if [ $? -eq 0 ]; then
        echo "${download_link}"
      fi
  fi
}

get_current_version() {
  local current_version="$(basename "$(find "${EVM_HOME}" -type l -name "${ES}" -exec readlink {} +)")"
  echo "${current_version}" | cut -d "-" -f 2
}

install_version() {

  local version="$1"
  _check_version "${version}"

  if [[ -d "${ES_HOME}-${version}" ]]; then
    abort "Elasticsearch ${version} has been already installed."
  fi

  local download_link="$(_get_download_link "${version}")"
  if [[ -z "${download_link}" ]]; then
    abort "Elasticsearch ${version} not found."
  fi

  echo "-> Downloading Elasticsearch ${version} from elastic.co"
  echo "Retrieving ${download_link}"
  local output_file="${EVM_HOME}/${ES}-${version}.${ES_DOWNLOAD_EXT}"
  wget -nc "${download_link}" -O "${output_file}"

  # TODO: Verify downloaded file's checksum before installing (suggested by @xluffy)

  echo "Installing ${output_file}"
  tar -xzf "${output_file}" -C "${EVM_HOME}/"

  # Use this version if no other version in use
  local current_version=$(get_current_version)
  if [ -z "${current_version}" ]; then
    use_version "${version}"
  fi

  # Remove the downloaded file
  if rm -rf "${output_file}"; then
    echo "Removed ${output_file}"
  fi

  echo "-> Installed Elasticsearch ${version}"
}

use_version() {
  local version="$1"
  _check_version "${version}"
  local use_version="${ES_HOME}-${version}"
  if [[ ! -d "${use_version}" ]]; then
    abort "Elasticsearch ${version} not found. Use 'evm list' to see available versions."
  fi
  if ln -sfn "${use_version}" "${ES_HOME}"; then
    echo "-> Now using Elasticsearch ${version}"
  else
    abort
  fi
}

start_current_version() {
	local cmd="${ES_CMD}"
  if [[ ! -x "${cmd}" ]]; then
    abort "The command ${cmd} is not executable, no Elasticsearch version in use."
  fi
	while getopts ":c:" option; do
    case "${option}" in
      c)
        local config_path="$OPTARG"
        if [[ ! -d "${config_path}" ]]; then
          abort "Invalid config path: '${config_path}'"
        fi
        local current_version="$(get_current_version)"
				case "$current_version" in
				  1.*|2.*) cmd="${cmd} -Des.path.conf=${config_path}" ;;
          *) cmd="${cmd} -Epath.conf=${config_path}" ;;
        esac
    esac
	done
	${cmd}
}

remove_version() {
  local version="$1"
  _check_version "${version}"

  local removed_version_folder="${ES}-${version}"
  if [[ ! -d "${EVM_HOME}/${removed_version_folder}" ]]; then
    abort "Elasticsearch ${version} not found."
  fi

  local current_version="$(get_current_version)"
  if [[ "${version}" = "${current_version}" ]]; then
    abort "Elasticsearch ${version} is in use."
  fi

  if rm -rf "${EVM_HOME}/${removed_version_folder}"; then
    abort "Could not remove the version ${version}."
  else
    echo "-> Elasticsearch ${version} has been removed"
  fi
}

manage_plugin() {

  list_option="list"
  install_option="install"
  remove_option="remove"

  local current_version="$(get_current_version)"
  case "${current_version}" in
    '')
      abort "No Elasticsearch version in use. Use evm -h for help."
      ;;
    1.*)
      cmd="${ES_HOME}/bin/plugin"
      list_option="--list"
      install_option="--install"
      remove_option="--remove"
      ;;
    2.*)
      cmd="${ES_HOME}/bin/plugin"
      ;;
    *)
      cmd="${ES_HOME}/bin/elasticsearch-plugin"
      ;;
  esac

  if [ ! -x "$cmd" ]; then
    abort "The Elasticsearch plugin command not found or unexecutable."
  fi

  plugin_sub_cmd="$1"
  shift
  case "$plugin_sub_cmd" in
    list)
      cmd="$cmd $list_option"
      ;;
    install)
      cmd="$cmd $install_option $@"
      ;;
    remove)
      cmd="$cmd $remove_option $@"
      ;;
    *)
      abort "The command 'plugin' requires a valid argument. Use evm -h for help."
    ;;
  esac
  ${cmd}
}

list_versions() {
  local current_version=$(get_current_version)
  for e in $(find "$EVM_HOME" -maxdepth 1 -mindepth 1 -type d -name "$ES-*" | sort -nr); do
    version="$(basename "$e")"
    version="$(echo $version | cut -d "-" -f 2)"
    if [[ "$current_version" = "$version" ]]; then
      echo -e "\033[0;32m* $version\033[0m"
    else
      echo -e "  $version"
    fi
  done
}

print_usage() {
  cat <<'EOF'

Elasticsearch Version Manager

Usage:
 evm -h                                             Print help information
 evm -V                                             Print version information
 evm list                                           List all installed Elasticsearch versions
 evm version                                        Print the current activated Elasticsearch version
 evm install <version>                              Install a specific Elasticsearch version
 evm use <version>                                  Use a specific Elasticsearch version
 evm remove <version>                               Remove a specific Elasticsearch version if available
 evm which [<version>]                              Print path to installed Elasticsearch version
 evm plugin list                                    List all installed Elasticsearch plugins
 evm plugin <install|remove> <plugin>               Install or remove an Elasticsearch plugin
 evm start [-c </path/to/config/dir>]               Start Elasticsearch with/without a specific config directory

Example:
 evm install 5.3.1                                  Install Elasticsearch 5.3.1
 evm use 5.3.1                                      Use Elasticsearch 5.3.1
 evm start                                          Start Elasticsearch node with the default config directory
 evm start -c /etc/elasticsearch                    Start Elasticsearch node with /etc/elasticsearch config directory
 evm plugin install x-pack                          Install the x-pack plugin
 evm plugin remove x-pack                           Remove the x-pack plugin

Note: To remove evm - just remove the EVM_HOME folder (usually ~/.evm)

EOF
}

print_evm_version(){
  echo "$EVM_NAME $EVM_VERSION"
}

print_current_version() {
  echo "$(get_current_version)"
}

print_version_path(){
  local version="${1:-$(get_current_version)}"
  local path="$EVM_HOME/$ES-$version"
  if [[ -d "${path}" ]]; then
    echo "${path}"
  else
    echo "Elasticsearch version not found."
  fi
}

main() {
  while getopts ":hV" opt; do
    case "${opt}" in
      h) print_usage; exit 0 ;;
      V) print_evm_version; exit 0 ;;
      \?) abort "Unknown option: -${OPTARG}. Use evm -h for help." ;;
    esac
  done
  shift "$((OPTIND -1))"

  sub_cmd="$1"; shift
  case "${sub_cmd}" in
    ${INSTALL_CMD}) install_version "$@" ;;
    ${USE_CMD}) use_version "$@" ;;
    ${START_CMD}) start_current_version "$@" ;;
    ${REMOVE_CMD}) remove_version "$@" ;;
    ${PLUGIN_CMD}) manage_plugin "$@" ;;
    ${WHICH_CMD}) print_version_path "$@" ;;
    ${LIST_CMD}) list_versions ;;
    ${VERSION_CMD}) print_current_version ;;
    *) abort "Invalid command: '${sub_cmd}'. Use evm -h for help." ;;
  esac

}

main "$@"

exit $?
